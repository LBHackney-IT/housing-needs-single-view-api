const findVulnerabilitySnapshots = require('../../lib/use-cases/FindVulnerabilitySnapshots');

describe('FindVulnerabilitySnapshots', () => {
  const expectedRecord = {
    id: '123',
    name: [
      {
        first: 'Test',
        last: 'Person'
      }
    ],
    systemIds: {
      ACADEMY: 'ACADEMY-123',
      JIGSAW: 'JIGSAW-123'
    }
  };

  const expectedSnapshots = [{ id: '123' }, { id: '456' }];
  const expectedToken = 'a-very-secure-token';

  it('finds vulnerability snapshots using the customer details', async () => {
    const find = jest.fn(() => ({ snapshots: expectedSnapshots }));
    const fetchRecords = jest.fn(() => expectedRecord);
    const execute = findVulnerabilitySnapshots({
      vulnerabilities: { find },
      fetchRecords
    });
    const expectedCustomer = {
      firstName: 'Test',
      lastName: 'Person',
      systemIds: ['123', 'ACADEMY-123', 'JIGSAW-123']
    };

    const { snapshots } = await execute({
      customerId: '123',
      token: expectedToken
    });

    expect(find).toHaveBeenCalledWith({
      ...expectedCustomer,
      token: expectedToken
    });

    expect(snapshots).toBe(expectedSnapshots);
  });

  it('throws an error if customer not found', async () => {
    const fetchRecords = jest.fn(() => null);
    const find = jest.fn(() => ({ snapshotIds: expectedSnapshots }));
    const execute = findVulnerabilitySnapshots({
      fetchRecords,
      vulnerabilities: { find }
    });

    await expect(
      execute({
        customerId: 1,
        token: 1
      })
    ).rejects.toThrow();
  });
});
