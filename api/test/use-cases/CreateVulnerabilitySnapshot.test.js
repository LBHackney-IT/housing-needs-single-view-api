const createVulnerabilitySnapshot = require('../../lib/use-cases/CreateVulnerabilitySnapshot');

describe('CreateVulnerabilitySnapshot', () => {
  const expectedRecord = {
    id: '123',
    name: [
      {
        first: 'Bob',
        last: 'Smith'
      }
    ],
    systemIds: {
      ACADEMY: 'ACADEMY-123',
      JIGSAW: 'JIGSAW-123'
    }
  };

  const expectedSnapshotId = '1';
  const expectedToken = 'a-very-secure-token';

  it('creates a vulnerability snapshot using the customer details', async () => {
    const create = jest.fn(() => ({ id: expectedSnapshotId }));
    const fetchRecords = jest.fn(() => expectedRecord);
    const execute = createVulnerabilitySnapshot({
      vulnerabilities: { create },
      fetchRecords
    });

    const snapshot = await execute({
      customerId: expectedRecord.id,
      token: expectedToken
    });

    expect(create).toHaveBeenCalledWith({
      customer: {
        firstName: expectedRecord.name[0].first,
        lastName: expectedRecord.name[0].last,
        systemIds: expect.arrayContaining([
          expectedRecord.id,
          expectedRecord.systemIds.ACADEMY,
          expectedRecord.systemIds.JIGSAW
        ])
      },
      token: expectedToken
    });

    expect(snapshot.id).toBe(expectedSnapshotId);
  });

  it('throws an error if customer not found', async () => {
    const fetchRecords = jest.fn(() => null);
    const create = jest.fn(() => ({ id: expectedSnapshotId }));
    const execute = createVulnerabilitySnapshot({
      fetchRecords,
      vulnerabilities: { create }
    });

    await expect(
      execute({
        customerId: 1,
        token: 1
      })
    ).rejects.toThrow();
  });
});
